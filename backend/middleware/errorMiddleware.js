const AppError = require("../utils/appError");


// handle cast error that is appear for invalid id generated by mongoose

const handleCastErrorDB = (err) => {
    //   err.path :=> name of the field for which the error is accure

      const message = `Invalid ${err.path}: ${err.value}.`;

     //   400 :-> stands for bad request

      return new AppError(message, 400)
}

// handle duplicate fields error 

const handleDuplicateFieldsDB = (err) => {
   
      let val = "";

      for (const [key, value] of Object.entries(err.keyValue)) {
          val += `${key}: ${value}${Object.entries(err.keyValue).length > 1 ? "," : ""}`;
       }

      const message = `Duplicate field ${val}. Please use another value!`
   
      return new AppError(message, 400);
}

// handle the validation error

const handleValidationErrorDB = (err) => {
      const errors = Object.values(err.errors).map(el => el.message);
      
      const message = `Invalid input data. ${errors.join('. ')}`;
     
      return new AppError(message, 400);
      
}

// handle error caused by jwt

const handleJWTError = (err) => {
    return new AppError("Invalid token. Please log in again!", 401)
}

// handle jwt Expired token error

const handleJWTExpiredError = (err) => {
   return new AppError("Your token has expired. Please log in again!", 401);
}

// send the response error for development

const sendErrorDev = (err, res) => {
  res.status(err.statusCode).json({
    status: err.status,
    error: err,
    message: err.message,
    stack: err.stack,
  });
};

// send the response error for production

const sendErrorProd = (err, res) => {
//   Operational, trusted errors: send message to client
  if(err.isOperational){
     res.status(err.statusCode).json({
     status: err.status,
     message: err.message,
   });

//    Programming or other unknown error: don't leak error details
  }else{
    // 1) Log error
    console.log("ERROR", err);

    // 2) send a generic message
    res.status(500).json({
        status: "error",
        message: "Somthing went very wrong"
    })
  }
 
};

module.exports = (err, req, res, next) => {
 
  err.statusCode = err.statusCode || 500;
  err.status = err.status || "error";

  if (process.env.NODE_ENV === "development") {
    sendErrorDev(err, res);
  } else if (process.env.NODE_ENV === "production") {
    
     let error =  {...JSON.parse(JSON.stringify(err))} 
      //  let error = {...err}
    
    // cast error handler

    if(error.name === "CastError") error = handleCastErrorDB(error);

    // error caused by duplicate field insertion
    
    if(error.code === 11000) error = handleDuplicateFieldsDB(error);

    // error caused by validation

    if(error.name === "ValidationError") error = handleValidationErrorDB(error);

    // error caused by invalid token

    if(error.name === "JsonWebTokenError") error = handleJWTError(error);

    // error caused by expired token

    if(error.name === "TokenExpiredError") error = handleJWTExpiredError(error);
    error = JSON.parse(JSON.stringify(error)) 
    
    sendErrorProd(error, res);
  }
};
